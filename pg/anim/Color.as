package pg.anim{	public class Color{		public static function fadeTo(f_startColor:int, f_endColor:int, f_position:Number):int{			var r:int = f_startColor >> 16			var g:int = (f_startColor >> 8) & 0xff			var b:int = f_startColor & 0xff			var er:int = f_endColor >> 16			var eg:int = (f_endColor >> 8) & 0xff			var eb:int = f_endColor & 0xff;			f_position = (f_position > 1) ? 1 : f_position;			f_position = (f_position < 0) ? 0 : f_position;			r = r + ((er - r) * f_position);			g = g + ((eg - g) * f_position);			b = b + ((eb - b) * f_position);			return (r << 16 | g << 8 | b)		}				public static function dodgeTo(f_startColor:int, f_endColor:int, f_position:Number):int{			var r:int = (f_startColor >> 16);			var g:int = ((f_startColor >> 8) & 0xff);			var b:int = (f_startColor & 0xff);			var dr:int;			var dg:int;			var db:int;			var rate:Number;			if (f_position > 1){				dr = f_endColor - r;				dg = f_endColor - g;				db = f_endColor - b;				if (dr >= dg && dr >= db){					rate = dr;				} else if (dg >= db && dg >= dr){					rate = dg;				} else if (db >= dg && db >= dr){					rate = db;				}				f_position = (f_position > 2) ? 1 : f_position - 1;				rate *= f_position				r = (r + rate > 0xff) ? 0xff : r + rate;				g = (g + rate > 0xff) ? 0xff : g + rate;				b = (b + rate > 0xff) ? 0xff : b + rate;						}			return (r << 16 | g << 8 | b)		}				public static function burnTo(f_startColor:int, f_endColor:int, f_position:Number):int{			var r:int = (f_startColor >> 16);			var g:int = ((f_startColor >> 8) & 0xff);			var b:int = (f_startColor & 0xff);			var dr:int;			var dg:int;			var db:int;			var rate:Number;			if (f_position <= 1){				dr = f_startColor >> 16;				dg = (f_startColor >> 8) & 0xff;				db = f_startColor & 0xff;				if (dr >= dg && dr >= db){					rate = dr;				} else if (dg >= db && dg >= dr){					rate = dg;				} else if (db >= dg && db >= dr){					rate = db;				} 				f_position = (f_position < 0) ? 0 : f_position;								rate = rate - rate * f_position;				r = (r + rate < 0) ? 0 : r + rate;				g = (g + rate < 0) ? 0 : g + rate;				b = (b + rate < 0) ? 0 : b + rate;			}			return ((r << 16) | (g << 8) | b)		}				private function intensity(f_color:int, f_val:Number):int{			var r:int = (f_color >> 16);			var g:int = ((f_color >> 8) & 0xff);			var b:int = (f_color & 0xff);			var dr:int;			var dg:int;			var db:int;			var rate:Number;			if (f_val > 1){				dr = 0xff - r;				dg = 0xff - g;				db = 0xff - b;				if (dr >= dg && dr >= db){					rate = dr;				} else if (dg >= db && dg >= dr){					rate = dg;				} else if (db >= dg && db >= dr){					rate = db;				}				f_val = (f_val > 2) ? 1 : f_val - 1;				rate *= f_val				r = (r + rate > 0xff) ? 0xff : r + rate;				g = (g + rate > 0xff) ? 0xff : g + rate;				b = (b + rate > 0xff) ? 0xff : b + rate;						} else if (f_val <= 1){				dr = f_color >> 16;				dg = (f_color >> 8) & 0xff;				db = f_color & 0xff;				if (dr >= dg && dr >= db){					rate = dr;				} else if (dg >= db && dg >= dr){					rate = dg;				} else if (db >= dg && db >= dr){					rate = db;				} 				f_val = (f_val < 0) ? 0 : f_val;								rate = rate - rate * f_val;				r = (r + rate < 0) ? 0 : r + rate;				g = (g + rate < 0) ? 0 : g + rate;				b = (b + rate < 0) ? 0 : b + rate;			}			return ((r << 16) | (g << 8) | b)		}				public static function overlayTo(f_startColor:int, f_endColor:int, f_position:Number):int{			var r:int = (f_startColor >> 16);			var g:int = ((f_startColor >> 8) & 0xff);			var b:int = (f_startColor & 0xff);			var er:int = f_endColor >> 16			var eg:int = (f_endColor >> 8) & 0xff			var eb:int = f_endColor & 0xff;			var dr:int;			var dg:int;			var db:int;			var rate:Number;			if (f_position > 1){				dr = 0xff - r;				dg = 0xff - g;				db = 0xff - b;				if (dr >= dg && dr >= db){					rate = dr;				} else if (dg >= db && dg >= dr){					rate = dg;				} else if (db >= dg && db >= dr){					rate = db;				}				f_position = (f_position > 2) ? 1 : f_position - 1;				rate *= f_position				r = (r + rate > 0xff) ? 0xff : r + rate;				g = (g + rate > 0xff) ? 0xff : g + rate;				b = (b + rate > 0xff) ? 0xff : b + rate;						} else if (f_position <= 1){				dr = f_startColor >> 16;				dg = (f_startColor >> 8) & 0xff;				db = f_startColor & 0xff;				if (dr >= dg && dr >= db){					rate = dr;				} else if (dg >= db && dg >= dr){					rate = dg;				} else if (db >= dg && db >= dr){					rate = db;				} 				f_position = (f_position < 0) ? 0 : f_position;								rate = rate - rate * f_position;				r = (r + rate < 0) ? 0 : r + rate;				g = (g + rate < 0) ? 0 : g + rate;				b = (b + rate < 0) ? 0 : b + rate;			}			return ((r << 16) | (g << 8) | b)		}				public static function brightnessTo(f_color:int, f_position:Number):int{			var r:int			var g:int			var b:int			if (f_position <= 1){				f_position = (f_position < 0) ? 0 : f_position;				r = (f_color >> 16) * f_position;				g = ((f_color >> 8) & 0xff) * f_position;				b = (f_color & 0xff) * f_position;			} else if (f_position > 1){				f_position = (f_position > 2) ? 1 : f_position - 1;				r = (f_color >> 16) + ((0xff - (f_color >> 16)) * f_position);				g = ((f_color >> 8) & 0xff) + ((0xff - ((f_color >> 8) & 0xff)) * f_position);				b = (f_color & 0xff) + ((0xff - (f_color & 0xff)) * f_position);			}			return (r << 16 | g << 8 | b)		}	}}