package pg.components {	import pg.Blit;	import com.greensock.TweenLite;	import com.greensock.plugins.AutoAlphaPlugin;	import com.greensock.plugins.ColorMatrixFilterPlugin;	import com.greensock.plugins.TintPlugin;	import com.greensock.plugins.TweenPlugin;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.text.AntiAliasType;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	public class TextButton extends BasicButton {		protected var _overTextColor : int = 0xffffff;		protected var _upTextColor : int = 0x1F334C;		protected var _downTextColor : int = 0x1F334C;		protected var _errorTextColor : int = 0xffffff;		protected var _textSize : Number;		public var overBg : MovieClip;		public var upBg : MovieClip;		public var downBg : MovieClip;		public var errorBg : MovieClip;		public var displayText : TextField;		public var textBlit : Bitmap = new Bitmap(new BitmapData(1, 1, false, 0));		protected var _assets : MovieClip;		protected var tf : TextFormat;		public function TextButton() {			TweenPlugin.activate([AutoAlphaPlugin, TintPlugin, ColorMatrixFilterPlugin]);			if (upBg != null) {				assets = this;				setupText();				setStage();				setListeners();			}		}		protected function setupText() : void {			tf = new TextFormat();			// var font:Font = new TagFont();			tf.font = "Arial"			// font.fontName;			tf.color = _upTextColor;			tf.size = 14;			tf.align = TextFormatAlign.CENTER;			displayText = new TextField();			displayText.htmlText = "";			displayText.defaultTextFormat = tf;			displayText.embedFonts = true;			displayText.width = width - 20;			displayText.height = 20;			displayText.antiAliasType = AntiAliasType.ADVANCED;			displayText.x = (width >> 1) - (displayText.width >> 1);			displayText.y = ((_assets.upBg.height >> 1) - (displayText.textHeight >> 1)) - (.25 * Number(tf.size));			assets.addChild(displayText);		}		override public function set state(f_state : int) : void {			switch (f_state) {				case BasicButton.UP:					TweenLite.to(textBlit, tweenTime, {tint:_upTextColor});					break;				case BasicButton.DOWN:					TweenLite.to(textBlit, tweenTime, {tint:_downTextColor});					break;				case BasicButton.IN:				// Intentional fall through				// could be made into its own state if required				// doubling up on the over state for now.									case BasicButton.OVER:					TweenLite.to(textBlit, tweenTime, {tint:_overTextColor});					break;				case BasicButton.ERROR:					TweenLite.to(textBlit, tweenTime, {tint:_errorTextColor});					break;				case BasicButton.DEACTIVATED:					TweenLite.to(textBlit, tweenTime, {tint:_errorTextColor});					break;			}			super.state = f_state;		}		public function set upTextColor(value : int) : void {			_upTextColor = value;			text = displayText.text;			state = _state;		}		public function set overTextColor(value : int) : void {			_overTextColor = value;			text = displayText.text;			state = _state;		}		public function set downTextColor(value : int) : void {			_downTextColor = value;			text = displayText.text;			state = _state;		}		public function set errorTextColor(value : int) : void {			_errorTextColor = value;			text = displayText.text;			state = _state;		}		public function set text(value : String) : void {			displayText.htmlText = value;			if (assets.contains(textBlit)) {				assets.removeChild(textBlit);				textBlit.bitmapData.dispose();				textBlit = null;			}			if (assets.contains(displayText)) {				assets.removeChild(displayText);			}			textBlit = Blit.getBitmap(displayText, 4, true);			assets.addChild(textBlit);			state = _state;		}		public function set textSize(value : Number) : void {			_textSize = value;			text = displayText.text;			centerText();		}		public function centerText() : void {			centerTextX();			centerTextY();		}		public function centerTextX() : void {			if (textBlit) {				textBlit.x = (upBg.width >> 1) - (textBlit.width >> 1);			}		}		public function centerTextY() : void {			if (textBlit) {				textBlit.y = (upBg.height >> 1) - (textBlit.height >> 1);			}		}		override public function set width(value : Number) : void {			errorBg.width = overBg.width = upBg.width = downBg.width = value;			displayText.width = value;			displayText.x = (value >> 1) - (displayText.width >> 1);			text = displayText.text;			centerText();			scaleX = 1;		}		override public function set height(value : Number) : void {			errorBg.height = overBg.height = upBg.height = downBg.height = value;			tf.size = (_textSize) ? _textSize : value * .30;			displayText.defaultTextFormat = tf;			displayText.height = displayText.textHeight * 1.2;			// displayText.y = ((value >> 1) - (displayText.height >> 1));			displayText.y = ((value >> 1) - (displayText.textHeight >> 1)) + (.1 * Number(tf.size));			text = displayText.text;			centerText();			scaleY = 1;		}	}}