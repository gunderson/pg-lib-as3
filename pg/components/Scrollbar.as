package pg.components {		import flash.events.Event;	import flash.events.MouseEvent;	import com.greensock.TweenMax;	import flash.geom.Rectangle;	import flash.display.Sprite;	import flash.display.MovieClip;	public class Scrollbar extends Sprite {		public var viewableArea:Sprite;		public var contentArea:Sprite;		protected var contentPosition:Number = 0;		public var currentValue:Number = 0;		protected var minContentY:Number;		protected var maxContentY:Number;		protected var minValue:Number;		protected var maxValue:Number;		protected var minHandleY:Number;		protected var maxHandleY:Number;		protected var isDragging:Boolean = false;				public var upArrow:Sprite;		public var downArrow:Sprite;		public var handle:Sprite;		public var bar:Sprite;				protected const SCROLLRATE : Number = 0.02;		protected var _assets : MovieClip;				public function Scrollbar(viewableArea:Sprite, contentArea:Sprite, minValue:Number = 0, maxValue:Number = 1){			this.contentArea = contentArea;			this.viewableArea = viewableArea;			this.minValue = minValue;			this.maxValue = maxValue;		}				public function init():void{			setupHandle();		}				public function get assets():MovieClip{			return _assets;		}				public function set assets(assets:MovieClip):void{			_assets = assets;						setLocalAsset(_assets.upArrow, "upArrow");			setLocalAsset(_assets.downArrow, "downArrow");			setLocalAsset(_assets.handle, "handle");			setLocalAsset(_assets.bar, "bar");						setLimits(viewableArea, contentArea, minValue, maxValue)			setStage();		}				public function setLocalAsset(externalAsset:MovieClip = null, localName:String = ""):void{			if (externalAsset) {				this[localName] = externalAsset;			} else {				this[localName] = new MovieClip();			}		}					protected function setStage():void{			upArrow.visible = false;			downArrow.visible = false;			setupHandle();			setupbar();			setupButtons();			setupWheel();		}				protected function setupbar():void{			bar.addEventListener(MouseEvent.CLICK, onbarClick);		}				public function setLimits(f_viewableArea:Sprite, f_contentArea:Sprite, f_minValue:Number = 0, f_maxValue:Number = 1):void{			viewableArea = f_viewableArea;			contentArea = f_contentArea;			minContentY = viewableArea.y;			maxContentY = viewableArea.y  + viewableArea.height - contentArea.height - 10;						contentArea.x = viewableArea.x;			contentArea.y = viewableArea.y;						minValue = currentValue = f_minValue;			maxValue = f_maxValue;						contentArea.mask = viewableArea									if (viewableArea.height > contentArea.height){				handle.visible = false;			} else {				handle.visible = true;			}			setupHandle()		}				public function setupHandle():void{			handle.height = viewableArea.height * (bar.height / contentArea.height);			minHandleY = bar.y;			maxHandleY = bar.y + bar.height - handle.height;			handle.y = bar.y;			handle.addEventListener(MouseEvent.MOUSE_DOWN, onHandleDown);			handle.buttonMode = true;		}				protected function setupButtons():void{			upArrow.addEventListener(MouseEvent.MOUSE_DOWN, onUpArrowDown);			upArrow.buttonMode = true;			downArrow.addEventListener(MouseEvent.MOUSE_DOWN, onDownArrowDown);			downArrow.buttonMode = true;		}				protected function setupWheel():void{			assets.addEventListener(MouseEvent.MOUSE_WHEEL, onWheel);		}				protected function onWheel(e:MouseEvent):void{			if (e.delta > 0){				scrollUp()			} else if (e.delta < 0){				scrollDown()			}		}				protected function onbarClick(e:MouseEvent):void{			contentPosition = e.localY / 100;			jumpContentTo(contentPosition);			jumpHandleTo(contentPosition);		}				protected function onHandleDrag(e:Event):void{			contentPosition = (handle.y - minHandleY) / (maxHandleY - minHandleY);			jumpContentTo(contentPosition);		}				function onHandleDown(e:Event):void{			handle.startDrag(false, new Rectangle(bar.x, minHandleY, 0, maxHandleY - minHandleY));			assets.stage.addEventListener(MouseEvent.MOUSE_UP, onHandleUp);			handle.removeEventListener(MouseEvent.MOUSE_DOWN, onHandleDown);			this.addEventListener(Event.ENTER_FRAME, onHandleDrag);			isDragging = true		}				protected function onHandleUp(e:Event):void{			handle.stopDrag();			handle.addEventListener(MouseEvent.MOUSE_DOWN, onHandleDown);			assets.stage.removeEventListener(MouseEvent.MOUSE_UP, onHandleUp);			this.removeEventListener(Event.ENTER_FRAME, onHandleDrag);			isDragging = false;		}				protected function jumpContentTo(f_pos:Number):void{			contentArea.y = (f_pos * (maxContentY - minContentY)) + minContentY;			currentValue = (f_pos * (maxValue - minValue)) + minValue;			//var dest:Number = (f_pos * (maxContentY - minContentY)) + minContentY;			//var destVal:Number = (f_pos * (maxValue - minValue)) + minValue;			//TweenMax.to(this, 0.25, {currentValue:destVal});			//TweenMax.to(contentArea, 0.25, {y:-dest});		}				protected function jumpHandleTo(f_pos:Number):void{			handle.y = (f_pos * (maxHandleY - minHandleY)) + minHandleY;			//var dest:Number = (f_pos * (maxHandleY - minHandleY)) + minHandleY;			//TweenMax.to(handle, 0.25, {y:dest});		}				protected function onUpArrowDown(e:Event):void{			assets.stage.addEventListener(MouseEvent.MOUSE_UP, onUpArrowUp);			upArrow.removeEventListener(MouseEvent.MOUSE_DOWN, onUpArrowDown);			this.addEventListener(Event.ENTER_FRAME, scrollUp);		}				protected function onUpArrowUp(e:Event):void{			assets.stage.removeEventListener(MouseEvent.MOUSE_UP, onUpArrowUp);			upArrow.addEventListener(MouseEvent.MOUSE_DOWN, onUpArrowDown);			this.removeEventListener(Event.ENTER_FRAME, scrollUp);		}				protected function onDownArrowDown(e:Event):void{			assets.stage.addEventListener(MouseEvent.MOUSE_UP, onDownArrowUp);			upArrow.removeEventListener(MouseEvent.MOUSE_DOWN, onDownArrowDown);			this.addEventListener(Event.ENTER_FRAME, scrollDown);		}				protected function onDownArrowUp(e:Event):void{			assets.stage.removeEventListener(MouseEvent.MOUSE_UP, onDownArrowDown);			upArrow.addEventListener(MouseEvent.MOUSE_DOWN, onDownArrowUp);			this.removeEventListener(Event.ENTER_FRAME, scrollDown);		}				protected function scrollUp(e:Event = null):void{			contentPosition -= SCROLLRATE;			if (contentPosition < 0){				contentPosition = 0;			}			jumpContentTo(contentPosition);			jumpHandleTo(contentPosition);		}				protected function scrollDown(e:Event = null):void{			contentPosition += SCROLLRATE;			if (contentPosition > 1){				contentPosition = 1;			}			jumpContentTo(contentPosition);			jumpHandleTo(contentPosition);		}	}	}