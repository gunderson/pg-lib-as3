package pg.components {	import com.greensock.easing.Linear;	import com.greensock.easing.Ease;	import com.greensock.easing.Quint;	import com.greensock.TweenMax;	import com.greensock.plugins.AutoAlphaPlugin;	import com.greensock.plugins.ColorMatrixFilterPlugin;	import com.greensock.plugins.TintPlugin;	import com.greensock.plugins.TweenPlugin;	import flash.display.MovieClip;	import flash.events.MouseEvent;	public class BasicButton extends MovieClip {		public static const IN : int = -1;		public static const UP : int = 0;		public static const OVER : int = 1;		public static const DOWN : int = 2;		public static const ERROR : int = 3;		public static const DEACTIVATED : int = 4;				public static const STATUS_ON:int = 1;		public static const STATUS_OFF:int = 0;		public var tweenTime : Number = 0.4;		public var overBg : MovieClip;		public var upBg : MovieClip;		public var downBg : MovieClip;		public var errorBg : MovieClip;		public var deactivatedBg : MovieClip;		protected var _assets : MovieClip;		public var _state : int = BasicButton.UP;		public var mouseIsDown : Boolean = false;		public var mouseIsOver : Boolean = false;		protected var _deactivated : Boolean = false;		protected var _status:int = BasicButton.STATUS_ON;		protected var _fullSwap : Boolean = false;		protected var _ease : Ease = Linear.easeNone;		public function BasicButton() {			TweenPlugin.activate([AutoAlphaPlugin, TintPlugin, ColorMatrixFilterPlugin]);			if (upBg != null) {				assets = this;				setStage();				setListeners();			}		}		protected function setStage() : void {			var ttt : Number = tweenTime;			tweenTime = 0;			state = BasicButton.UP;			tweenTime = ttt;			assets.mouseChildren = false;			assets.buttonMode = true;			assets.hitArea = upBg;		}		public function setListeners() : void {			assets.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);			assets.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);			assets.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);		}		public function killListeners() : void {			assets.removeEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);			assets.removeEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);			assets.removeEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);		}		protected function handleMouseOver(e : MouseEvent) : void {			mouseIsOver = true;			if (!mouseIsDown) {				state = BasicButton.OVER;			}		}		protected function handleMouseOut(e : MouseEvent) : void {			mouseIsOver = false;			if (!mouseIsDown) {				state = BasicButton.UP;			}		}		protected function handleMouseDown(e : MouseEvent) : void {			mouseIsDown = true;			state = BasicButton.DOWN;			assets.stage.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);		}		protected function handleMouseUp(e : MouseEvent) : void {			mouseIsDown = false;			if (!mouseIsOver) {				state = BasicButton.UP;			} else {				state = BasicButton.OVER;			}			assets.stage.removeEventListener(MouseEvent.MOUSE_UP, handleMouseUp);		}		public function set state(f_state : int) : void {			switch (f_state) {				case BasicButton.UP:					TweenMax.killTweensOf(upBg);					TweenMax.to(upBg, tweenTime, {overwite: 1, autoAlpha:1});					TweenMax.to(overBg, tweenTime, {autoAlpha:0, colorMatrixFilter:{contrast:1, brightness:1, ease: _ease}});					TweenMax.to(downBg, tweenTime, {autoAlpha:0, ease: _ease});					TweenMax.to(errorBg, tweenTime, {autoAlpha:0, ease: _ease});					TweenMax.to(deactivatedBg, tweenTime, {autoAlpha:0, ease: _ease});					break;				case BasicButton.DOWN:					TweenMax.to(overBg, tweenTime, {colorMatrixFilter:{contrast:1, brightness:1}, autoAlpha:0, ease: _ease});					TweenMax.to(downBg, tweenTime, {autoAlpha:1, ease: _ease});					TweenMax.to(errorBg, tweenTime, {autoAlpha:0, ease: _ease});					TweenMax.to(deactivatedBg, tweenTime, {autoAlpha:0, ease: _ease});					break;				case BasicButton.IN:					// Intentional fall through to OVER state					// could be made into its own state if required but doubling up on the over state for now.					TweenMax.delayedCall(tweenTime * 0.3, function() : void {						state = BasicButton.UP;					});				case BasicButton.OVER:					if (fullSwap) {						TweenMax.to(upBg, tweenTime, {autoAlpha:0, delay: tweenTime * .75, ease: _ease});					}					TweenMax.to(overBg, tweenTime, {colorMatrixFilter:{contrast:1, brightness:1, ease: _ease}, autoAlpha:1});//					TweenMax.delayedCall(tweenTime * .3, function() : void {//						if (_state == BasicButton.OVER) {//							TweenMax.to(overBg, tweenTime * .7, {colorMatrixFilter:{contrast:1, brightness:1, ease: _ease}});//						}//					});					TweenMax.to(errorBg, tweenTime, {autoAlpha:0, ease: _ease});					TweenMax.to(downBg, tweenTime, {autoAlpha:0, ease: _ease});					TweenMax.to(deactivatedBg, tweenTime, {autoAlpha:0, ease: _ease});					break;				case BasicButton.ERROR:					TweenMax.to(overBg, tweenTime, {autoAlpha:0, colorMatrixFilter:{contrast:1, brightness:1, ease: _ease}});					TweenMax.to(downBg, tweenTime, {autoAlpha:0, ease: _ease});					TweenMax.to(errorBg, tweenTime, {autoAlpha:1, ease: _ease});					TweenMax.to(deactivatedBg, tweenTime, {autoAlpha:0, ease: _ease});					break;				case BasicButton.DEACTIVATED:					TweenMax.to(overBg, tweenTime, {autoAlpha:0, colorMatrixFilter:{contrast:1, brightness:.5, ease: _ease}});					TweenMax.to(downBg, tweenTime, {autoAlpha:0, ease: _ease});					TweenMax.to(errorBg, tweenTime, {autoAlpha:0, ease: _ease});					TweenMax.to(deactivatedBg, tweenTime, {autoAlpha:1, ease: _ease});					break;			}			_state = f_state;			if (fullSwap && _state != BasicButton.UP) TweenMax.to(upBg, tweenTime, {autoAlpha:0, ease: _ease});		}		public function get state() : int {			return _state;		}		public function get assets() : MovieClip {			return _assets;		}		public function set assets(assets : MovieClip) : void {			_assets = assets;			setLocalAsset(_assets.upBg, "upBg")			setLocalAsset(_assets.overBg, "overBg")			setLocalAsset(_assets.downBg, "downBg")			setLocalAsset(_assets.errorBg, "errorBg");			setLocalAsset(_assets.deactivatedBg, "deactivatedBg")			//addChild(assets)			setStage();			setListeners();		}				public function setLocalAsset(externalAsset:MovieClip = null, localName:String = ""):void{			if (externalAsset) {				this[localName] = externalAsset;			} else {				this[localName] = new MovieClip();			}		}				public function set deactivate(deactivate:Boolean):void{			_deactivated = deactivate;			if (deactivate) {				killListeners()				state = BasicButton.DEACTIVATED;			} else {				setListeners();				state = BasicButton.UP;			}		}		public function get status() : int {			return _status;		}		public function set status(status : int) : void {			_status = status;		}				public function toggleStatus():int{			status = (status + 1) % 2;			return status;		}		public function get fullSwap() : Boolean {			return _fullSwap;		}		public function set fullSwap(fullSwap : Boolean) : void {			_fullSwap = fullSwap;		}				public function destroy():void{			killListeners();			assets.stage.removeEventListener(MouseEvent.MOUSE_UP, handleMouseUp);		}	}}